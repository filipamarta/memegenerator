{"version":3,"sources":["img/memegenerator.svg","components/Header.js","components/MemeGeneratorUI.js","components/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","src","memegenerator","alt","MemeGeneratorUI","data","handleChange","handleSubmit","className","onSubmit","type","name","value","topText","onChange","placeholder","bottomText","image","MemeGenerator","apiMemes","fetch","then","response","json","setState","allMemeImgs","memes","randomMeme","Math","floor","random","state","length","event","target","preventDefault","memeNumber","memeImgUrl","url","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,2C,8KCgB5BC,MAZf,WACI,OACI,gCACI,yBACIC,IAAKC,IACLC,IAAI,mBAER,gD,mCCoBGC,MA7Bf,YAA8D,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,aAC5C,OACE,yBAAKC,UAAU,gBACb,0BAAMA,UAAU,YAAYC,SAAUF,GACpC,2BACEG,KAAK,OACLC,KAAK,UACLC,MAAOP,EAAKQ,QACZC,SAAUR,EACVS,YAAY,aAEd,2BACEL,KAAK,OACLC,KAAK,aACLC,MAAOP,EAAKW,WACZF,SAAUR,EACVS,YAAY,gBAEd,4BAAQL,KAAK,UAAb,cAEF,yBAAKF,UAAU,QACb,wBAAIA,UAAU,OAAOH,EAAKQ,SAC1B,yBAAKZ,IAAKI,EAAKY,MAAOd,IAAI,eAC1B,wBAAIK,UAAU,UAAUH,EAAKW,eCqCtBE,G,wDAzDb,aAAe,IAAD,8BACZ,gBASFC,SAAW,WACTC,MAAM,qCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACL,EAAKE,SAAS,CACZC,YAAaH,EAASjB,KAAKqB,YAfrB,EAwBdC,WAAa,WACX,OAAOC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMN,YAAYO,SAzB7C,EA4Bd1B,aAAe,SAAC2B,GAAW,IAAD,EACAA,EAAMC,OAAtBtB,EADgB,EAChBA,MAAOD,EADS,EACTA,KACf,EAAKa,SAAL,eACGb,EAAOC,KA/BE,EAmCdL,aAAe,SAAC0B,GACdA,EAAME,iBACN,IAAMC,EAAa,EAAKT,aAClBU,EAAa,EAAKN,MAAMN,YAAYW,GAAYE,IACtD,EAAKd,SAAS,CACZP,MAAOoB,KAtCT,EAAKN,MAAQ,CACXlB,QAAS,GACTG,WAAY,GACZC,MAAO,gCACPQ,YAAa,IANH,E,gEAqBZc,KAAKpB,a,+BAwBL,OACE,6BACE,kBAAC,EAAD,CACEb,aAAciC,KAAKjC,aACnBC,aAAcgC,KAAKhC,aACnBF,KAAMkC,KAAKR,a,GAnDOS,cCSbC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fa93968e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/memegenerator.66ed434c.svg\";","import React from \"react\";\nimport './Header.scss';\nimport memegenerator from '../img/memegenerator.svg'\n\nfunction Header() {\n    return (\n        <header>\n            <img \n                src={memegenerator}\n                alt=\"meme generator\"\n            />\n            <h1>Meme Generator</h1>\n        </header>\n    )\n}\n\nexport default Header;","import React from \"react\";\n\nfunction MemeGeneratorUI({data, handleChange, handleSubmit}) {\n  return (\n    <div className=\"meme-wrapper\">\n      <form className=\"meme-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"topText\"\n          value={data.topText}\n          onChange={handleChange}\n          placeholder=\"Top Text\"\n        />\n        <input\n          type=\"text\"\n          name=\"bottomText\"\n          value={data.bottomText}\n          onChange={handleChange}\n          placeholder=\"Bottom Text\"\n        />\n        <button type=\"submit\">Generate!</button>\n      </form>\n      <div className=\"meme\">\n        <h2 className=\"top\">{data.topText}</h2>\n        <img src={data.image} alt=\"meme image\" />\n        <h2 className=\"bottom\">{data.bottomText}</h2>\n      </div>\n    </div>\n  );\n}\n\nexport default MemeGeneratorUI;\n","import React, { Component } from \"react\";\nimport MemeGeneratorUI from \"./MemeGeneratorUI\";\nimport \"./MemeGenerator.scss\";\n\nclass MemeGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      image: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: [],\n    };\n  }\n\n  apiMemes = () => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((response) => response.json())\n      .then((response) => {\n        this.setState({\n          allMemeImgs: response.data.memes,\n        });\n      });\n  };\n\n  componentDidMount() {\n    this.apiMemes();\n  }\n\n  randomMeme = () => {\n    return Math.floor(Math.random() * this.state.allMemeImgs.length);\n  };\n\n  handleChange = (event) => {\n    const { value, name } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const memeNumber = this.randomMeme();\n    const memeImgUrl = this.state.allMemeImgs[memeNumber].url;\n    this.setState({\n      image: memeImgUrl,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <MemeGeneratorUI\n          handleChange={this.handleChange}\n          handleSubmit={this.handleSubmit}\n          data={this.state}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MemeGenerator;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport MemeGenerator from \"./components/MemeGenerator\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}